<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/cache 
	http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
	http://www.springframework.org/schema/beans	 
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd 
    http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
						
	<!-- 开启缓存注解 -->
	<cache:annotation-driven />
	<!-- 开启注解扫描器 -->
	<context:component-scan base-package="golden"/>

	
	<!-- 配置数据源  -->
	<!-- 如果自己写，要改这里 ，注入会话工厂-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/practice"></property>
			
		<!-- 搭到腾讯云上时记得改数据库名为pratice -->
		<property name="username" value="root"></property>
		<property name="password" value="root"></property>
				
	</bean>
	
	
<!-- 	配置数据源 class="com.alibaba.druid.pool.DruidDataSource"
        <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driver}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
        初始化连接大小  
        <property name="initialSize" value="${jdbc.initialSize}"></property>  
        连接池最大数量  
        <property name="maxActive" value="${jdbc.maxActive}"></property>  
        连接池最大空闲  
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>  
        连接池最小空闲  
        <property name="minIdle" value="${jdbc.minIdle}"></property>  
        获取连接最大等待时间  
        <property name="maxWait" value="${jdbc.maxWait}"></property>  
    </bean>  -->

	
	
	<!-- 加载访问jedis数据库的属性文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
   		<property name="locations">
   			<list>
   			    <value>classpath:jdbc.properties</value>
   				<value>classpath:redis.properties</value>
   			</list>
   		</property>   
	</bean>	
	

	
	<!-- 配置会话工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
		
		 <property name="configurationProperties">
            <props>
                    <!-- 开启关键-->
                <prop key="cacheEnabled">true</prop>
                <!-- 查询时，关闭关联对象即时加载以提高性能 -->
                <prop key="lazyLoadingEnabled">false</prop>
                <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 -->
                <prop key="aggressiveLazyLoading">true</prop>
                <!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
                <prop key="multipleResultSetsEnabled">true</prop>
                <!-- 允许使用列标签代替列名 -->
                <prop key="useColumnLabel">true</prop>
                <!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
                <prop key="useGeneratedKeys">true</prop>
                <!-- 给予被嵌套的resultMap以字段-属性的映射支持 -->
                <prop key="autoMappingBehavior">FULL</prop>
                <!-- 对于批量更新操作缓存SQL以提高性能 -->
                <prop key="defaultExecutorType">BATCH</prop>
                <!-- 数据库超过3000秒仍未响应则超时 -->
                <prop key="defaultStatementTimeout">3000</prop>
            </props>
        </property> 
	</bean>
	
	
	<!--设置连接池--> 
     <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
	      <property name="maxIdle" value="${redis.maxIdle}"/>
	      <property name="maxTotal" value="${redis.maxTotal}" /> 
	      <property name="maxWaitMillis" value="${redis.maxWait}" /> 
	      <property name="testOnBorrow" value="${redis.testOnBorrow}" /> 
	      <!-- <property name="testOnReturn" value="${redis.testOnReturn}" />  -->
     </bean> 
     <!--设置链接属性 p:database="${redis.db}" 这一个注解为设置选择某个reids的dp，可以不加 默认选择第0个--> 
     <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
     p:hostName="${redis.host}" 
     p:port="${redis.port}" 
     p:database="${redis.db}"
     p:pool-config-ref="poolConfig" 
     p:timeout="3000"/>
     
     
     <!-- Jedis模板配置 -->
     <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"> 
     	<property name="connectionFactory" ref="connectionFactory" /> 
     	<!-- key,value序列化 -->
     	<property name="keySerializer">  
            <bean  
            class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="valueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
        </property> 
     </bean>
     
     <!-- p:password="${redis.pass}"  -->
     
     
     
     <!-- 配置RedisCacheManager -->
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate" />
        <property name="defaultExpiration" value="${redis.expiration}" />
        <!-- 配置缓存区间 -->
        <property name="cacheNames">
        	<list>
        		<value>aboutUser</value>
        	</list>
        </property>
    </bean>
 
	<!-- 配置RedisCacheConfig -->
	<!--  <bean id="redisCacheConfig" class="golden.redis.RedisCacheConfig">
		<constructor-arg ref="connectionFactory"/>
		<constructor-arg ref="redisTemplate"/>
		<constructor-arg ref="redisCacheManager"/>
	</bean> -->
		 
	
	
	
	 <!-- 提供方应用信息，用于计算依赖关系 -->
   <!--  <dubbo:application name="provider"/>
 
    服务端需要把dubbo服务注册到zookeeper上进行广播
    <dubbo:registry address="zookeeper://127.0.0.1:2181" />
    用dubbo协议在20880端口暴露服务
    <dubbo:protocol name="dubbo" port="20880" />
    当ProtocolConfig和ServiceConfig某属性没有配置时,采用此缺省值
    <dubbo:provider timeout="10000" threadpool="fixed" threads="100" accepts="1000" />
 
    声明需要暴露的服务接口
    <dubbo:service interface="golden.service.userservice" ref="userservice" />
    将服务的实现交给spring容器管理
    <bean id="userserviceimpl" class="golden.userserviceimpl"></bean>
    
    指定监控中心，registry意为通过注册中心自动寻找监控中心
    <dubbo:monitor protocol="registry"></dubbo:monitor> -->
    
	
	<!-- 配置事务管理器-->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	 
	<!-- 配置事务相关的通知，即对那些方法自动开启事务和提交事务 -->
	<!-- 如果自己写，要改这里 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="select*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置切面 -->
	<aop:config>
		<!-- 如果自己写，要改这里 --><!-- 切面编程，拦截到之后执行前开事务，之后提交事务，并指定方法所在层 -->
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* golden.service..*.*(..))"/>
	</aop:config>
	
</beans>
